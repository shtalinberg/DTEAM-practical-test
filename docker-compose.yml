services:
  postgres:
    image: postgres:17
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./volumes/postgres_data:/var/lib/postgresql/data/
    ports:
      - "5435:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - ./volumes/redis_data:/data
    networks:
      - app-network

  web:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}-web
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/code/sc_backend
      - DJANGO_SETTINGS_MODULE=djproject.settings.production
    ports:
      - "8888:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/code
      - ./volumes/static:/var/static/
      - ./volumes/media:/var/media/
    networks:
      - app-network

  celery:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}-celery
    restart: always
    command: sh -c "cd sc_backend && celery -A djproject worker --loglevel=info"
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/code/sc_backend
      - DJANGO_SETTINGS_MODULE=djproject.settings.production
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/code
      - ./volumes/static:/var/static/
      - ./volumes/media:/var/media/
    networks:
      - app-network

networks:
  app-network:
    driver: bridge